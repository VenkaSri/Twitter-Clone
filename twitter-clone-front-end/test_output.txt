
> twitter-clone-front-end@0.1.0 test
> jest

watchman warning:  opendir(/Users/venkateshsritharan/Library/Containers/com.apple.corerecents.recentsd/Data/Library/Recents) -> Operation not permitted. Marking this portion of the tree deleted
To clear this warning, run:
`watchman watch-del '/Users/venkateshsritharan' ; watchman watch-project '/Users/venkateshsritharan'`

FAIL __tests__/components/signup/inputs/EmailTextField.test.js
  EmailTextField Component
    ✕ renders correctly
    ✕ handles user input correctly (1 ms)
    ✕ displays error for invalid email format

  ● EmailTextField Component › renders correctly

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      25 | describe("EmailTextField Component", () => {
      26 |   it("renders correctly", () => {
    > 27 |     render(
         |           ^
      28 |       <Provider store={store}>
      29 |         <EmailTextField />
      30 |       </Provider>

      at render (node_modules/@testing-library/react/dist/pure.js:215:5)
      at Object.<anonymous> (__tests__/components/signup/inputs/EmailTextField.test.js:27:11)

  ● EmailTextField Component › handles user input correctly

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      34 |
      35 |   it("handles user input correctly", async () => {
    > 36 |     render(
         |           ^
      37 |       <Provider store={store}>
      38 |         <EmailTextField />
      39 |       </Provider>

      at render (node_modules/@testing-library/react/dist/pure.js:215:5)
      at call (__tests__/components/signup/inputs/EmailTextField.test.js:36:11)
      at tryCatch (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at Generator._invoke (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at Generator.next (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at asyncGeneratorStep (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at _next (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at __tests__/components/signup/inputs/EmailTextField.test.js:2:1
      at Object.<anonymous> (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)

  ● EmailTextField Component › displays error for invalid email format

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      45 |
      46 |   it("displays error for invalid email format", async () => {
    > 47 |     render(
         |           ^
      48 |       <Provider store={store}>
      49 |         <EmailTextField />
      50 |       </Provider>

      at render (node_modules/@testing-library/react/dist/pure.js:215:5)
      at call (__tests__/components/signup/inputs/EmailTextField.test.js:47:11)
      at tryCatch (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at Generator._invoke (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at Generator.next (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at asyncGeneratorStep (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at _next (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)
      at __tests__/components/signup/inputs/EmailTextField.test.js:2:1
      at Object.<anonymous> (__tests__/components/signup/inputs/EmailTextField.test.js:2:1)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 total
Snapshots:   0 total
Time:        1.002 s, estimated 2 s
Ran all test suites.

/Users/venkateshsritharan/intellij/Twitter Clone/twitter-clone-front-end/node_modules/axios/dist/node/axios.cjs:1913
    reject(new AxiosError(
           ^
AxiosError {
  message: 'Request failed with status code 404',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: 'http',
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: null
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.5.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    constructor: [Function: Object],
    request: [Function: wrap],
    getUri: [Function: wrap],
    delete: [Function: wrap],
    get: [Function: wrap],
    head: [Function: wrap],
    options: [Function: wrap],
    post: [Function: wrap],
    postForm: [Function: wrap],
    put: [Function: wrap],
    putForm: [Function: wrap],
    patch: [Function: wrap],
    patchForm: [Function: wrap],
    defaults: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: 'http',
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: {
        common: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': undefined
        },
        delete: {},
        get: {},
        head: {},
        post: {},
        put: {},
        patch: {}
      }
    },
    interceptors: {
      request: InterceptorManager { handlers: [] },
      response: InterceptorManager { handlers: [] }
    },
    create: [Function: create],
    Axios: [class Axios],
    CanceledError: [Function: CanceledError],
    CancelToken: [class CancelToken],
    isCancel: [Function: isCancel],
    VERSION: '1.5.0',
    toFormData: [Function: toFormData],
    AxiosError: [Function: AxiosError] { from: [Function (anonymous)] },
    Cancel: [Function: CanceledError],
    all: [Function: all],
    spread: [Function: spread],
    isAxiosError: [Function: isAxiosError],
    mergeConfig: [Function: mergeConfig],
    AxiosHeaders: [class AxiosHeaders] {
      [Symbol(internals)]: {
        accessors: {
          'content-type': true,
          'content-length': true,
          accept: true,
          'accept-encoding': true,
          'user-agent': true,
          authorization: true
        }
      }
    },
    formToJSON: [Function (anonymous)],
    getAdapter: [Function: getAdapter],
    HttpStatusCode: {
      '100': 'Continue',
      '101': 'SwitchingProtocols',
      '102': 'Processing',
      '103': 'EarlyHints',
      '200': 'Ok',
      '201': 'Created',
      '202': 'Accepted',
      '203': 'NonAuthoritativeInformation',
      '204': 'NoContent',
      '205': 'ResetContent',
      '206': 'PartialContent',
      '207': 'MultiStatus',
      '208': 'AlreadyReported',
      '226': 'ImUsed',
      '300': 'MultipleChoices',
      '301': 'MovedPermanently',
      '302': 'Found',
      '303': 'SeeOther',
      '304': 'NotModified',
      '305': 'UseProxy',
      '306': 'Unused',
      '307': 'TemporaryRedirect',
      '308': 'PermanentRedirect',
      '400': 'BadRequest',
      '401': 'Unauthorized',
      '402': 'PaymentRequired',
      '403': 'Forbidden',
      '404': 'NotFound',
      '405': 'MethodNotAllowed',
      '406': 'NotAcceptable',
      '407': 'ProxyAuthenticationRequired',
      '408': 'RequestTimeout',
      '409': 'Conflict',
      '410': 'Gone',
      '411': 'LengthRequired',
      '412': 'PreconditionFailed',
      '413': 'PayloadTooLarge',
      '414': 'UriTooLong',
      '415': 'UnsupportedMediaType',
      '416': 'RangeNotSatisfiable',
      '417': 'ExpectationFailed',
      '418': 'ImATeapot',
      '421': 'MisdirectedRequest',
      '422': 'UnprocessableEntity',
      '423': 'Locked',
      '424': 'FailedDependency',
      '425': 'TooEarly',
      '426': 'UpgradeRequired',
      '428': 'PreconditionRequired',
      '429': 'TooManyRequests',
      '431': 'RequestHeaderFieldsTooLarge',
      '451': 'UnavailableForLegalReasons',
      '500': 'InternalServerError',
      '501': 'NotImplemented',
      '502': 'BadGateway',
      '503': 'ServiceUnavailable',
      '504': 'GatewayTimeout',
      '505': 'HttpVersionNotSupported',
      '506': 'VariantAlsoNegotiates',
      '507': 'InsufficientStorage',
      '508': 'LoopDetected',
      '510': 'NotExtended',
      '511': 'NetworkAuthenticationRequired',
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    },
    default: <ref *1> [Function: wrap] {
      constructor: [Function: wrap],
      request: [Function: wrap],
      getUri: [Function: wrap],
      delete: [Function: wrap],
      get: [Function: wrap],
      head: [Function: wrap],
      options: [Function: wrap],
      post: [Function: wrap],
      postForm: [Function: wrap],
      put: [Function: wrap],
      putForm: [Function: wrap],
      patch: [Function: wrap],
      patchForm: [Function: wrap],
      defaults: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: 'http',
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: {
          common: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': undefined
          },
          delete: {},
          get: {},
          head: {},
          post: {},
          put: {},
          patch: {}
        }
      },
      interceptors: {
        request: InterceptorManager { handlers: [] },
        response: InterceptorManager { handlers: [] }
      },
      create: [Function: create],
      Axios: [class Axios],
      CanceledError: [Function: CanceledError],
      CancelToken: [class CancelToken],
      isCancel: [Function: isCancel],
      VERSION: '1.5.0',
      toFormData: [Function: toFormData],
      AxiosError: [Function: AxiosError] { from: [Function (anonymous)] },
      Cancel: [Function: CanceledError],
      all: [Function: all],
      spread: [Function: spread],
      isAxiosError: [Function: isAxiosError],
      mergeConfig: [Function: mergeConfig],
      AxiosHeaders: [class AxiosHeaders] {
        [Symbol(internals)]: {
          accessors: {
            'content-type': true,
            'content-length': true,
            accept: true,
            'accept-encoding': true,
            'user-agent': true,
            authorization: true
          }
        }
      },
      formToJSON: [Function (anonymous)],
      getAdapter: [Function: getAdapter],
      HttpStatusCode: {
        '100': 'Continue',
        '101': 'SwitchingProtocols',
        '102': 'Processing',
        '103': 'EarlyHints',
        '200': 'Ok',
        '201': 'Created',
        '202': 'Accepted',
        '203': 'NonAuthoritativeInformation',
        '204': 'NoContent',
        '205': 'ResetContent',
        '206': 'PartialContent',
        '207': 'MultiStatus',
        '208': 'AlreadyReported',
        '226': 'ImUsed',
        '300': 'MultipleChoices',
        '301': 'MovedPermanently',
        '302': 'Found',
        '303': 'SeeOther',
        '304': 'NotModified',
        '305': 'UseProxy',
        '306': 'Unused',
        '307': 'TemporaryRedirect',
        '308': 'PermanentRedirect',
        '400': 'BadRequest',
        '401': 'Unauthorized',
        '402': 'PaymentRequired',
        '403': 'Forbidden',
        '404': 'NotFound',
        '405': 'MethodNotAllowed',
        '406': 'NotAcceptable',
        '407': 'ProxyAuthenticationRequired',
        '408': 'RequestTimeout',
        '409': 'Conflict',
        '410': 'Gone',
        '411': 'LengthRequired',
        '412': 'PreconditionFailed',
        '413': 'PayloadTooLarge',
        '414': 'UriTooLong',
        '415': 'UnsupportedMediaType',
        '416': 'RangeNotSatisfiable',
        '417': 'ExpectationFailed',
        '418': 'ImATeapot',
        '421': 'MisdirectedRequest',
        '422': 'UnprocessableEntity',
        '423': 'Locked',
        '424': 'FailedDependency',
        '425': 'TooEarly',
        '426': 'UpgradeRequired',
        '428': 'PreconditionRequired',
        '429': 'TooManyRequests',
        '431': 'RequestHeaderFieldsTooLarge',
        '451': 'UnavailableForLegalReasons',
        '500': 'InternalServerError',
        '501': 'NotImplemented',
        '502': 'BadGateway',
        '503': 'ServiceUnavailable',
        '504': 'GatewayTimeout',
        '505': 'HttpVersionNotSupported',
        '506': 'VariantAlsoNegotiates',
        '507': 'InsufficientStorage',
        '508': 'LoopDetected',
        '510': 'NotExtended',
        '511': 'NetworkAuthenticationRequired',
        Continue: 100,
        SwitchingProtocols: 101,
        Processing: 102,
        EarlyHints: 103,
        Ok: 200,
        Created: 201,
        Accepted: 202,
        NonAuthoritativeInformation: 203,
        NoContent: 204,
        ResetContent: 205,
        PartialContent: 206,
        MultiStatus: 207,
        AlreadyReported: 208,
        ImUsed: 226,
        MultipleChoices: 300,
        MovedPermanently: 301,
        Found: 302,
        SeeOther: 303,
        NotModified: 304,
        UseProxy: 305,
        Unused: 306,
        TemporaryRedirect: 307,
        PermanentRedirect: 308,
        BadRequest: 400,
        Unauthorized: 401,
        PaymentRequired: 402,
        Forbidden: 403,
        NotFound: 404,
        MethodNotAllowed: 405,
        NotAcceptable: 406,
        ProxyAuthenticationRequired: 407,
        RequestTimeout: 408,
        Conflict: 409,
        Gone: 410,
        LengthRequired: 411,
        PreconditionFailed: 412,
        PayloadTooLarge: 413,
        UriTooLong: 414,
        UnsupportedMediaType: 415,
        RangeNotSatisfiable: 416,
        ExpectationFailed: 417,
        ImATeapot: 418,
        MisdirectedRequest: 421,
        UnprocessableEntity: 422,
        Locked: 423,
        FailedDependency: 424,
        TooEarly: 425,
        UpgradeRequired: 426,
        PreconditionRequired: 428,
        TooManyRequests: 429,
        RequestHeaderFieldsTooLarge: 431,
        UnavailableForLegalReasons: 451,
        InternalServerError: 500,
        NotImplemented: 501,
        BadGateway: 502,
        ServiceUnavailable: 503,
        GatewayTimeout: 504,
        HttpVersionNotSupported: 505,
        VariantAlsoNegotiates: 506,
        InsufficientStorage: 507,
        LoopDetected: 508,
        NotExtended: 510,
        NetworkAuthenticationRequired: 511
      },
      default: [Circular *1]
    },
    method: 'get',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *3> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Function: onReadableStreamEnd],
        free: [Function: onFree],
        close: [ [Function: onClose], [Function: socketCloseListener] ],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(async_id_symbol)]: 41,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *3]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'GET /undefined HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.5.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] { noDelay: true, path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'localhost:80:': [
          <ref *3> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _readableState: [ReadableState],
            _events: [Object: null prototype],
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: [WritableState],
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(async_id_symbol)]: 41,
            [Symbol(kHandle)]: [TCP],
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/undefined',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(async_id_symbol)]: 41,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Date',
        'Wed, 30 Aug 2023 15:52:52 GMT',
        'Server',
        'Apache/2.4.56 (Unix)',
        'Content-Length',
        '196',
        'Connection',
        'close',
        'Content-Type',
        'text/html; charset=iso-8859-1'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 404,
      statusMessage: 'Not Found',
      client: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(async_id_symbol)]: 41,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'http://localhost/undefined',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        date: 'Wed, 30 Aug 2023 15:52:52 GMT',
        server: 'Apache/2.4.56 (Unix)',
        'content-length': '196',
        connection: 'close',
        'content-type': 'text/html; charset=iso-8859-1'
      },
      [Symbol(kHeadersCount)]: 10,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/undefined',
        method: 'GET',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.5.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [Array],
            STATUS_CODES: [Object],
            Agent: [Function],
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: [Agent],
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/undefined'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'http://localhost/undefined',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'user-agent': [ 'User-Agent', 'axios/1.5.0' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'localhost' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 404,
    statusText: 'Not Found',
    headers: Object [AxiosHeaders] {
      date: 'Wed, 30 Aug 2023 15:52:52 GMT',
      server: 'Apache/2.4.56 (Unix)',
      'content-length': '196',
      connection: 'close',
      'content-type': 'text/html; charset=iso-8859-1'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: 'http',
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: null
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': undefined,
        'User-Agent': 'axios/1.5.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      constructor: [Function: Object],
      request: [Function: wrap],
      getUri: [Function: wrap],
      delete: [Function: wrap],
      get: [Function: wrap],
      head: [Function: wrap],
      options: [Function: wrap],
      post: [Function: wrap],
      postForm: [Function: wrap],
      put: [Function: wrap],
      putForm: [Function: wrap],
      patch: [Function: wrap],
      patchForm: [Function: wrap],
      defaults: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: 'http',
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: null
        },
        validateStatus: [Function: validateStatus],
        headers: {
          common: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': undefined
          },
          delete: {},
          get: {},
          head: {},
          post: {},
          put: {},
          patch: {}
        }
      },
      interceptors: {
        request: InterceptorManager { handlers: [] },
        response: InterceptorManager { handlers: [] }
      },
      create: [Function: create],
      Axios: [class Axios],
      CanceledError: [Function: CanceledError],
      CancelToken: [class CancelToken],
      isCancel: [Function: isCancel],
      VERSION: '1.5.0',
      toFormData: [Function: toFormData],
      AxiosError: [Function: AxiosError] { from: [Function (anonymous)] },
      Cancel: [Function: CanceledError],
      all: [Function: all],
      spread: [Function: spread],
      isAxiosError: [Function: isAxiosError],
      mergeConfig: [Function: mergeConfig],
      AxiosHeaders: [class AxiosHeaders] {
        [Symbol(internals)]: {
          accessors: {
            'content-type': true,
            'content-length': true,
            accept: true,
            'accept-encoding': true,
            'user-agent': true,
            authorization: true
          }
        }
      },
      formToJSON: [Function (anonymous)],
      getAdapter: [Function: getAdapter],
      HttpStatusCode: {
        '100': 'Continue',
        '101': 'SwitchingProtocols',
        '102': 'Processing',
        '103': 'EarlyHints',
        '200': 'Ok',
        '201': 'Created',
        '202': 'Accepted',
        '203': 'NonAuthoritativeInformation',
        '204': 'NoContent',
        '205': 'ResetContent',
        '206': 'PartialContent',
        '207': 'MultiStatus',
        '208': 'AlreadyReported',
        '226': 'ImUsed',
        '300': 'MultipleChoices',
        '301': 'MovedPermanently',
        '302': 'Found',
        '303': 'SeeOther',
        '304': 'NotModified',
        '305': 'UseProxy',
        '306': 'Unused',
        '307': 'TemporaryRedirect',
        '308': 'PermanentRedirect',
        '400': 'BadRequest',
        '401': 'Unauthorized',
        '402': 'PaymentRequired',
        '403': 'Forbidden',
        '404': 'NotFound',
        '405': 'MethodNotAllowed',
        '406': 'NotAcceptable',
        '407': 'ProxyAuthenticationRequired',
        '408': 'RequestTimeout',
        '409': 'Conflict',
        '410': 'Gone',
        '411': 'LengthRequired',
        '412': 'PreconditionFailed',
        '413': 'PayloadTooLarge',
        '414': 'UriTooLong',
        '415': 'UnsupportedMediaType',
        '416': 'RangeNotSatisfiable',
        '417': 'ExpectationFailed',
        '418': 'ImATeapot',
        '421': 'MisdirectedRequest',
        '422': 'UnprocessableEntity',
        '423': 'Locked',
        '424': 'FailedDependency',
        '425': 'TooEarly',
        '426': 'UpgradeRequired',
        '428': 'PreconditionRequired',
        '429': 'TooManyRequests',
        '431': 'RequestHeaderFieldsTooLarge',
        '451': 'UnavailableForLegalReasons',
        '500': 'InternalServerError',
        '501': 'NotImplemented',
        '502': 'BadGateway',
        '503': 'ServiceUnavailable',
        '504': 'GatewayTimeout',
        '505': 'HttpVersionNotSupported',
        '506': 'VariantAlsoNegotiates',
        '507': 'InsufficientStorage',
        '508': 'LoopDetected',
        '510': 'NotExtended',
        '511': 'NetworkAuthenticationRequired',
        Continue: 100,
        SwitchingProtocols: 101,
        Processing: 102,
        EarlyHints: 103,
        Ok: 200,
        Created: 201,
        Accepted: 202,
        NonAuthoritativeInformation: 203,
        NoContent: 204,
        ResetContent: 205,
        PartialContent: 206,
        MultiStatus: 207,
        AlreadyReported: 208,
        ImUsed: 226,
        MultipleChoices: 300,
        MovedPermanently: 301,
        Found: 302,
        SeeOther: 303,
        NotModified: 304,
        UseProxy: 305,
        Unused: 306,
        TemporaryRedirect: 307,
        PermanentRedirect: 308,
        BadRequest: 400,
        Unauthorized: 401,
        PaymentRequired: 402,
        Forbidden: 403,
        NotFound: 404,
        MethodNotAllowed: 405,
        NotAcceptable: 406,
        ProxyAuthenticationRequired: 407,
        RequestTimeout: 408,
        Conflict: 409,
        Gone: 410,
        LengthRequired: 411,
        PreconditionFailed: 412,
        PayloadTooLarge: 413,
        UriTooLong: 414,
        UnsupportedMediaType: 415,
        RangeNotSatisfiable: 416,
        ExpectationFailed: 417,
        ImATeapot: 418,
        MisdirectedRequest: 421,
        UnprocessableEntity: 422,
        Locked: 423,
        FailedDependency: 424,
        TooEarly: 425,
        UpgradeRequired: 426,
        PreconditionRequired: 428,
        TooManyRequests: 429,
        RequestHeaderFieldsTooLarge: 431,
        UnavailableForLegalReasons: 451,
        InternalServerError: 500,
        NotImplemented: 501,
        BadGateway: 502,
        ServiceUnavailable: 503,
        GatewayTimeout: 504,
        HttpVersionNotSupported: 505,
        VariantAlsoNegotiates: 506,
        InsufficientStorage: 507,
        LoopDetected: 508,
        NotExtended: 510,
        NetworkAuthenticationRequired: 511
      },
      default: <ref *1> [Function: wrap] {
        constructor: [Function: wrap],
        request: [Function: wrap],
        getUri: [Function: wrap],
        delete: [Function: wrap],
        get: [Function: wrap],
        head: [Function: wrap],
        options: [Function: wrap],
        post: [Function: wrap],
        postForm: [Function: wrap],
        put: [Function: wrap],
        putForm: [Function: wrap],
        patch: [Function: wrap],
        patchForm: [Function: wrap],
        defaults: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: 'http',
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: { FormData: [Function], Blob: null },
          validateStatus: [Function: validateStatus],
          headers: {
            common: [Object],
            delete: {},
            get: {},
            head: {},
            post: {},
            put: {},
            patch: {}
          }
        },
        interceptors: {
          request: InterceptorManager { handlers: [] },
          response: InterceptorManager { handlers: [] }
        },
        create: [Function: create],
        Axios: [class Axios],
        CanceledError: [Function: CanceledError],
        CancelToken: [class CancelToken],
        isCancel: [Function: isCancel],
        VERSION: '1.5.0',
        toFormData: [Function: toFormData],
        AxiosError: [Function: AxiosError] { from: [Function (anonymous)] },
        Cancel: [Function: CanceledError],
        all: [Function: all],
        spread: [Function: spread],
        isAxiosError: [Function: isAxiosError],
        mergeConfig: [Function: mergeConfig],
        AxiosHeaders: [class AxiosHeaders] {
          [Symbol(internals)]: { accessors: [Object] }
        },
        formToJSON: [Function (anonymous)],
        getAdapter: [Function: getAdapter],
        HttpStatusCode: {
          '100': 'Continue',
          '101': 'SwitchingProtocols',
          '102': 'Processing',
          '103': 'EarlyHints',
          '200': 'Ok',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'NonAuthoritativeInformation',
          '204': 'NoContent',
          '205': 'ResetContent',
          '206': 'PartialContent',
          '207': 'MultiStatus',
          '208': 'AlreadyReported',
          '226': 'ImUsed',
          '300': 'MultipleChoices',
          '301': 'MovedPermanently',
          '302': 'Found',
          '303': 'SeeOther',
          '304': 'NotModified',
          '305': 'UseProxy',
          '306': 'Unused',
          '307': 'TemporaryRedirect',
          '308': 'PermanentRedirect',
          '400': 'BadRequest',
          '401': 'Unauthorized',
          '402': 'PaymentRequired',
          '403': 'Forbidden',
          '404': 'NotFound',
          '405': 'MethodNotAllowed',
          '406': 'NotAcceptable',
          '407': 'ProxyAuthenticationRequired',
          '408': 'RequestTimeout',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'LengthRequired',
          '412': 'PreconditionFailed',
          '413': 'PayloadTooLarge',
          '414': 'UriTooLong',
          '415': 'UnsupportedMediaType',
          '416': 'RangeNotSatisfiable',
          '417': 'ExpectationFailed',
          '418': 'ImATeapot',
          '421': 'MisdirectedRequest',
          '422': 'UnprocessableEntity',
          '423': 'Locked',
          '424': 'FailedDependency',
          '425': 'TooEarly',
          '426': 'UpgradeRequired',
          '428': 'PreconditionRequired',
          '429': 'TooManyRequests',
          '431': 'RequestHeaderFieldsTooLarge',
          '451': 'UnavailableForLegalReasons',
          '500': 'InternalServerError',
          '501': 'NotImplemented',
          '502': 'BadGateway',
          '503': 'ServiceUnavailable',
          '504': 'GatewayTimeout',
          '505': 'HttpVersionNotSupported',
          '506': 'VariantAlsoNegotiates',
          '507': 'InsufficientStorage',
          '508': 'LoopDetected',
          '510': 'NotExtended',
          '511': 'NetworkAuthenticationRequired',
          Continue: 100,
          SwitchingProtocols: 101,
          Processing: 102,
          EarlyHints: 103,
          Ok: 200,
          Created: 201,
          Accepted: 202,
          NonAuthoritativeInformation: 203,
          NoContent: 204,
          ResetContent: 205,
          PartialContent: 206,
          MultiStatus: 207,
          AlreadyReported: 208,
          ImUsed: 226,
          MultipleChoices: 300,
          MovedPermanently: 301,
          Found: 302,
          SeeOther: 303,
          NotModified: 304,
          UseProxy: 305,
          Unused: 306,
          TemporaryRedirect: 307,
          PermanentRedirect: 308,
          BadRequest: 400,
          Unauthorized: 401,
          PaymentRequired: 402,
          Forbidden: 403,
          NotFound: 404,
          MethodNotAllowed: 405,
          NotAcceptable: 406,
          ProxyAuthenticationRequired: 407,
          RequestTimeout: 408,
          Conflict: 409,
          Gone: 410,
          LengthRequired: 411,
          PreconditionFailed: 412,
          PayloadTooLarge: 413,
          UriTooLong: 414,
          UnsupportedMediaType: 415,
          RangeNotSatisfiable: 416,
          ExpectationFailed: 417,
          ImATeapot: 418,
          MisdirectedRequest: 421,
          UnprocessableEntity: 422,
          Locked: 423,
          FailedDependency: 424,
          TooEarly: 425,
          UpgradeRequired: 426,
          PreconditionRequired: 428,
          TooManyRequests: 429,
          RequestHeaderFieldsTooLarge: 431,
          UnavailableForLegalReasons: 451,
          InternalServerError: 500,
          NotImplemented: 501,
          BadGateway: 502,
          ServiceUnavailable: 503,
          GatewayTimeout: 504,
          HttpVersionNotSupported: 505,
          VariantAlsoNegotiates: 506,
          InsufficientStorage: 507,
          LoopDetected: 508,
          NotExtended: 510,
          NetworkAuthenticationRequired: 511
        },
        default: [Circular *1]
      },
      method: 'get',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(async_id_symbol)]: 41,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'GET /undefined HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.5.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] { 'localhost:80:': [ [Socket] ] },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/undefined',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *3> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [BufferList],
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [Array],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(async_id_symbol)]: 41,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *3]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Date',
          'Wed, 30 Aug 2023 15:52:52 GMT',
          'Server',
          'Apache/2.4.56 (Unix)',
          'Content-Length',
          '196',
          'Connection',
          'close',
          'Content-Type',
          'text/html; charset=iso-8859-1'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: <ref *3> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [BufferList],
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [Array],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(async_id_symbol)]: 41,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *3]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'http://localhost/undefined',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          date: 'Wed, 30 Aug 2023 15:52:52 GMT',
          server: 'Apache/2.4.56 (Unix)',
          'content-length': '196',
          connection: 'close',
          'content-type': 'text/html; charset=iso-8859-1'
        },
        [Symbol(kHeadersCount)]: 10,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/undefined',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.5.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '',
          agent: undefined,
          nativeProtocols: { 'http:': [Object], 'https:': [Object] },
          pathname: '/undefined'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'http://localhost/undefined',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.5.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\n' +
      '<html><head>\n' +
      '<title>404 Not Found</title>\n' +
      '</head><body>\n' +
      '<h1>Not Found</h1>\n' +
      '<p>The requested URL was not found on this server.</p>\n' +
      '</body></html>\n'
  }
}

Node.js v18.17.1
